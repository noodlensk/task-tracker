// Package async provides primitives to interact with the asyncapi
//
// Code generated by https://github.com/asyncapi/generator/ DO NOT EDIT.
package async

import (
	"context"
	"encoding/json"

	"github.com/ThreeDotsLabs/watermill/message"
	"github.com/pkg/errors"
)

func Register(application ServerInterface, router *message.Router, subscriber message.Subscriber) error {
	asyncServer := ServerInterfaceWrapper{app: application}

	router.AddNoPublisherHandler(
		"tasks.assigned",
		"tasks.assigned",
		subscriber,
		asyncServer.TaskAssigned,
	)

	router.AddNoPublisherHandler(
		"tasks.created",
		"tasks.created",
		subscriber,
		asyncServer.TaskCreated,
	)

	router.AddNoPublisherHandler(
		"tasks.completed",
		"tasks.completed",
		subscriber,
		asyncServer.TaskCompleted,
	)

	return nil
}

type ServerInterface interface {
	TaskAssigned(ctx context.Context, e TaskAssigned) error

	TaskCreated(ctx context.Context, e TaskCreated) error

	TaskCompleted(ctx context.Context, e TaskCompleted) error
}

type ServerInterfaceWrapper struct {
	app ServerInterface
}

func (s ServerInterfaceWrapper) TaskAssigned(msg *message.Message) error {
	event := &TaskAssigned{}

	err := json.Unmarshal(msg.Payload, &event)
	if err != nil {
		return errors.Wrap(err, "parse event")
	}

	return s.app.TaskAssigned(msg.Context(), *event)
}

func (s ServerInterfaceWrapper) TaskCreated(msg *message.Message) error {
	event := &TaskCreated{}

	err := json.Unmarshal(msg.Payload, &event)
	if err != nil {
		return errors.Wrap(err, "parse event")
	}

	return s.app.TaskCreated(msg.Context(), *event)
}

func (s ServerInterfaceWrapper) TaskCompleted(msg *message.Message) error {
	event := &TaskCompleted{}

	err := json.Unmarshal(msg.Payload, &event)
	if err != nil {
		return errors.Wrap(err, "parse event")
	}

	return s.app.TaskCompleted(msg.Context(), *event)
}
