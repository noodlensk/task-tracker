// Package subscriber provides primitives to interact with the asyncapi
//
// Code generated by https://github.com/asyncapi/generator/ DO NOT EDIT.
package subscriber

import (
	"context"
	"encoding/json"

	"github.com/ThreeDotsLabs/watermill/message"
	"github.com/pkg/errors"
)

func Register(application ServerInterface, router *message.Router, subscriber message.Subscriber) error {
	asyncServer := ServerInterfaceWrapper{app: application}

	router.AddNoPublisherHandler(
		"accounting.task_estimated",
		"accounting.task_estimated",
		subscriber,
		asyncServer.TaskEstimated,
	)

	router.AddNoPublisherHandler(
		"accounting.user_charged",
		"accounting.user_charged",
		subscriber,
		asyncServer.UserCharged,
	)

	router.AddNoPublisherHandler(
		"accounting.user_payed",
		"accounting.user_payed",
		subscriber,
		asyncServer.UserPayed,
	)

	return nil
}

type ServerInterface interface {
	TaskEstimated(ctx context.Context, e TaskEstimated) error

	UserCharged(ctx context.Context, e UserCharged) error

	UserPayed(ctx context.Context, e UserPayed) error
}

type ServerInterfaceWrapper struct {
	app ServerInterface
}

func (s ServerInterfaceWrapper) TaskEstimated(msg *message.Message) error {
	event := &TaskEstimated{}

	err := json.Unmarshal(msg.Payload, &event)
	if err != nil {
		return errors.Wrap(err, "parse event")
	}

	return s.app.TaskEstimated(msg.Context(), *event)
}

func (s ServerInterfaceWrapper) UserCharged(msg *message.Message) error {
	event := &UserCharged{}

	err := json.Unmarshal(msg.Payload, &event)
	if err != nil {
		return errors.Wrap(err, "parse event")
	}

	return s.app.UserCharged(msg.Context(), *event)
}

func (s ServerInterfaceWrapper) UserPayed(msg *message.Message) error {
	event := &UserPayed{}

	err := json.Unmarshal(msg.Payload, &event)
	if err != nil {
		return errors.Wrap(err, "parse event")
	}

	return s.app.UserPayed(msg.Context(), *event)
}
