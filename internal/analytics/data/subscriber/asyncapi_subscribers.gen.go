// Package subscriber provides primitives to interact with the asyncapi
//
// Code generated by https://github.com/asyncapi/generator/ DO NOT EDIT.
package subscriber

import (
	"context"
	"encoding/json"

	"github.com/ThreeDotsLabs/watermill/message"
	"github.com/pkg/errors"
)

func Register(application ServerInterface, router *message.Router, subscriber message.Subscriber) error {
	asyncServer := ServerInterfaceWrapper{app: application}

	router.AddNoPublisherHandler(
		"users-cud.created",
		"users-cud.created",
		subscriber,
		asyncServer.UserCreated,
	)

	router.AddNoPublisherHandler(
		"users-cud.updated",
		"users-cud.updated",
		subscriber,
		asyncServer.UserUpdated,
	)

	router.AddNoPublisherHandler(
		"accounting-cud.transaction.created",
		"accounting-cud.transaction.created",
		subscriber,
		asyncServer.TransactionCreated,
	)

	return nil
}

type ServerInterface interface {
	UserCreated(ctx context.Context, e UserCreated) error

	UserUpdated(ctx context.Context, e UserUpdated) error

	TransactionCreated(ctx context.Context, e TransactionCreated) error
}

type ServerInterfaceWrapper struct {
	app ServerInterface
}

func (s ServerInterfaceWrapper) UserCreated(msg *message.Message) error {
	event := &UserCreated{}

	err := json.Unmarshal(msg.Payload, &event)
	if err != nil {
		return errors.Wrap(err, "parse event")
	}

	return s.app.UserCreated(msg.Context(), *event)
}

func (s ServerInterfaceWrapper) UserUpdated(msg *message.Message) error {
	event := &UserUpdated{}

	err := json.Unmarshal(msg.Payload, &event)
	if err != nil {
		return errors.Wrap(err, "parse event")
	}

	return s.app.UserUpdated(msg.Context(), *event)
}

func (s ServerInterfaceWrapper) TransactionCreated(msg *message.Message) error {
	event := &TransactionCreated{}

	err := json.Unmarshal(msg.Payload, &event)
	if err != nil {
		return errors.Wrap(err, "parse event")
	}

	return s.app.TransactionCreated(msg.Context(), *event)
}
