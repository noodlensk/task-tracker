import {render} from '@asyncapi/generator-react-sdk';
import {pascalCase} from './common';

function Msg(message) {
    const name = pascalCase(message.name())
    const props = Object.entries(message.payload().properties()).map(([prop, schema]) => {
        const propName = pascalCase(prop)

        let goType = ""

        switch (schema.type()) {
            case 'string':
                switch (schema.format()) {
                    case 'date-time':
                        goType = 'time.Time'
                        break
                    case 'binary':
                        goType = '[]byte'
                        break
                    default:
                        goType = 'string'
                }
                break
            case 'integer':
                goType = "int"
                break
            case 'object':
                switch (schema.additionalProperties().type()) {
                    default:
                        switch (schema.additionalProperties().format()) {
                            case 'binary':
                                goType = 'map[string][]byte'
                                break
                            default:
                                goType = 'map[string]string'
                        }
                }
                break
        }

        return "\t" + `${propName} ${goType} \`json:"${prop}"\``
    })

    return (`type ${name} struct {
${props.join("\n")}
}
`
    )
}

function Messages({messages}) {
    return Object.entries(messages)
        .map(([messageName, message]) => {
            return Msg(message);
        });
}

export function Types({moduleName, messages}) {
    return `// Package ${moduleName} provides primitives to interact with the asyncapi
//
// Code generated by https://github.com/asyncapi/generator/ DO NOT EDIT.
package ${moduleName}
    
${render(<Messages messages={messages}/>)}
`;
}