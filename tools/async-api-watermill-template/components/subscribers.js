import {render} from '@asyncapi/generator-react-sdk';
import {pascalCase} from './common';

function InterfaceBlock({channels}) {
    const funcs = Object.entries(channels)
        .map(([_, channel]) => {
            const msgName = channel.subscribe().message().name()
            return `${msgName}(ctx context.Context, e ${msgName}) error
            `
        });

    return `type ServerInterface interface {
    ${funcs.join('\n')}
}`
}

function SubscribersBlock({channels}) {
    const funcs = Object.entries(channels)
        .map(([_, channel]) => {
            const msgName = channel.subscribe().message().name()
            return `func (s ServerInterfaceWrapper) ${msgName}(msg *message.Message) error {
    event := &${msgName}{}

    err := json.Unmarshal(msg.Payload, &event)
    if err != nil {
        return errors.Wrap(err, "parse event")
    }

    return s.app.${msgName}(msg.Context(), *event)
}
`
        });

    return `${funcs.join('\n')}
 `
}

function RegisterBlock({channels}) {
    const funcs = Object.entries(channels)
        .map(([channelName, channel]) => {
            const msgName = channel.subscribe().message().name()
            return `router.AddNoPublisherHandler(
		"${channelName}",
		"${channelName}",
		subscriber,
		asyncServer.${msgName},
	)
`
        });

    return `func Register(application ServerInterface, router *message.Router, subscriber message.Subscriber) error {
	asyncServer := ServerInterfaceWrapper{app: application}
    
    ${funcs.join('\n')}
    
	return nil
}
 `
}

export function Subscribers({moduleName, channels}) {
    return `// Package ${moduleName} provides primitives to interact with the asyncapi
//
// Code generated by https://github.com/asyncapi/generator/ DO NOT EDIT.
package ${moduleName}

import (
	"context"
	"encoding/json"

	"github.com/ThreeDotsLabs/watermill/message"
	"github.com/pkg/errors"
)

${render(<RegisterBlock channels={channels}/>)}

${render(<InterfaceBlock channels={channels}/>)}

type ServerInterfaceWrapper struct {
	app ServerInterface
}

${render(<SubscribersBlock channels={channels}/>)}
`;
}