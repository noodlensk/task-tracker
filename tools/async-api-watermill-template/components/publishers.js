import {render} from '@asyncapi/generator-react-sdk';
import {pascalCase} from './common';


function PublishersBlock({channels}) {
    const funcs = Object.entries(channels)
        .map(([channelName, channel]) => {
            const msgName = channel.publish().message().name()
            return `func (c PublisherClient) ${msgName}(ctx context.Context, e ${msgName}) error {
	data, err := json.Marshal(e)
	if err != nil {
		return errors.Wrap(err, "marshal data")
	}

	return c.publisher.Publish("${channelName}", message.NewMessage(watermill.NewShortUUID(), data))
}

`
        });

    return `${funcs.join('\n')}
 `
}

export function Publishers({moduleName, channels}) {
    return `// Package ${moduleName} provides primitives to interact with the asyncapi
//
// Code generated by https://github.com/asyncapi/generator/ DO NOT EDIT.
package ${moduleName}

import (
	"context"
	"encoding/json"

	"github.com/ThreeDotsLabs/watermill"
	"github.com/ThreeDotsLabs/watermill/message"
	"github.com/pkg/errors"
)

func NewPublisherClient(pub message.Publisher) *PublisherClient {
	return &PublisherClient{
		publisher: pub,
	}
}

type PublisherClient struct {
	publisher message.Publisher
}

${render(<PublishersBlock channels={channels}/>)}
`;
}